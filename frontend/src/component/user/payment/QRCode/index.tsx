import React, { useEffect, useState } from "react";

const apiUrl = "http://localhost:8000";

interface PromptPayChargeResponse {
  id: string;
  source: {
    scannable_code: {
      image: {
        download_uri: string;
      };
    };
  };
}

const PromptPayPayment: React.FC = () => {
  const [amount] = useState(100); // ‡∏ö‡∏≤‡∏ó
  const [qrImage, setQrImage] = useState<string | null>(null);
  const [chargeId, setChargeId] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [paymentStatus, setPaymentStatus] = useState<string | null>(null);

  useEffect(() => {
    if (!chargeId) return;

    const interval = setInterval(async () => {
      try {
        const res = await fetch(`${apiUrl}/api/status/${chargeId}`);
        const data = await res.json();

        if (data.status === "successful") {
          setPaymentStatus("‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
          clearInterval(interval);
        } else if (data.status === "failed" || data.status === "expired") {
          setPaymentStatus("‚ùå ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤");
          clearInterval(interval);
        } else {
          setPaymentStatus("üïê ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...");
        }
      } catch (error) {
        setPaymentStatus("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ");
        clearInterval(interval);
      }
    }, 5000);

    return () => clearInterval(interval);
  }, [chargeId]);

  const createPromptPayCharge = async (): Promise<PromptPayChargeResponse | null> => {
    setLoading(true);
    setPaymentStatus(null);

    try {
      const res = await fetch(`${apiUrl}/api/create-promptpay-charge`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ amount }),
      });

      if (!res.ok) throw new Error("‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      const data = (await res.json()) as PromptPayChargeResponse;

      setQrImage(data.source.scannable_code.image.download_uri);
      setChargeId(data.id);

      return data;
    } catch (error) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏î‡πâ");
      return null;
    } finally {
      setLoading(false);
    }
  };

  const confirmPayment = async () => {
    if (!chargeId) return;
    setLoading(true);

    try {
      const res = await fetch(`${apiUrl}/api/confirm-charge/${chargeId}`, { method: "POST" });
      if (!res.ok) throw new Error("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setPaymentStatus("üïê ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞...");
    } catch (error) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ maxWidth: 400, margin: "auto", padding: 20 }}>
      <h2>üí∞ ‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡πà‡∏≤‡∏ô PromptPay</h2>
      <button onClick={createPromptPayCharge} disabled={loading} style={{ marginBottom: 20 }}>
        {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR..." : "‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code PromptPay"}
      </button>

      {qrImage && (
        <div>
          <h3>üì± ‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
          <img src={qrImage} alt="PromptPay QR Code" style={{ width: 300, marginBottom: 20 }} />
          <button onClick={confirmPayment} disabled={loading}>
            {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô..." : "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß"}
          </button>
        </div>
      )}

      {paymentStatus && (
        <div style={{ marginTop: 15, fontWeight: "bold", color: paymentStatus.includes("‚úÖ") ? "green" : "red" }}>
          {paymentStatus}
        </div>
      )}
    </div>
  );
};

export default PromptPayPayment;
